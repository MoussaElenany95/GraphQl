"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Find a single post by an identifying attribute."
    post(
      id: ID @eq,
    ):Post @find

    "List multiple posts."
    posts(
        "Filters by title. Accepts SQL LIKE wildcards `%` and `_`."
        title: String @where(operator: "like")
      ): [Post!]! @paginate(defaultCount: 10)
    


}

type Mutation {
    "Create a new user."
    createUser(
      "The name of the user."
      name: String! @rules(apply: ["required", "max:255", "min:3"])

      "The email address of the user."
      email: String! @rules(apply: ["required", "email", "max:255", "unique:users,email"])

      "The password of the user."
      password: String! @rules(apply: ["required", "min:8", "max:255"]) @hash
    ): User @create

    "Update an existing user."
    updateUser(
      "The ID of the user to update."
      id: ID! @eq

      "The name of the user."
      name: String @rules(apply: ["max:255", "min:3"])

      "The email address of the user."
      email: String @rules(apply: ["email", "max:255", "unique:users,email"])

      "The password of the user."
      password: String @rules(apply: ["min:8", "max:255"]) @hash
    ): User @update
}



"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    "Posts created by this user."
    posts: [Post!]! @hasMany(type: PAGINATOR)

    "Comments created by this user."
    comments: [Comment!]! @hasMany(type: PAGINATOR)
}


type Post{
  "Unique primary key."
  id: ID!

  "Non-unique title."
  title: String!

  "None unique body."
  body: String!


  "When the account was created."
  created_at: DateTime!

  "When the account was last updated."
  updated_at: DateTime!

  "User who created the post."
  user: User!


  "Comments created for this post."
  comments: [Comment!]! @morphMany(type: PAGINATOR)

}


type Comment{

  id: ID!

  comment: String!

  user: User!

  post: Post!

  created_at: DateTime!

}